[
  {
    "objectID": "intro-to-data-science/autumn-2025/worksheets/week-4.html",
    "href": "intro-to-data-science/autumn-2025/worksheets/week-4.html",
    "title": "Week 4: Data cleaning and processing with R/RStudio",
    "section": "",
    "text": "The goal of this session is to start to learn about data wrangling – we saw last week how to gather data and today we will see how to transform it. This is key to being able to then analyse and explore the data and in practice the data wrangling part is probably about 80% of the effort when dealing with real life datasets.",
    "crumbs": [
      "Worksheets",
      "Week 4: Data cleaning and processing with R/RStudio"
    ]
  },
  {
    "objectID": "intro-to-data-science/autumn-2025/worksheets/week-4.html#learning-objectives",
    "href": "intro-to-data-science/autumn-2025/worksheets/week-4.html#learning-objectives",
    "title": "Week 4: Data cleaning and processing with R/RStudio",
    "section": "Learning objectives",
    "text": "Learning objectives\n\nTo show you how to manipulate data using the dplyr package\nTo show you how we can join two datasets (or tables) using a common variable\nTo highlight potential issues when working with real datasets (e.g. outliers andmissing values)",
    "crumbs": [
      "Worksheets",
      "Week 4: Data cleaning and processing with R/RStudio"
    ]
  },
  {
    "objectID": "intro-to-data-science/autumn-2025/worksheets/week-4.html#recap",
    "href": "intro-to-data-science/autumn-2025/worksheets/week-4.html#recap",
    "title": "Week 4: Data cleaning and processing with R/RStudio",
    "section": "1. Recap",
    "text": "1. Recap\nOver the past three weeks we have learned some of the basics of R including how to run functions, working with various types of data structure (e.g. vectors and data frames) and last week reading datasets and do some visualisation. This week we will focus on working with data and in particular transforming data. We also looked at the concept of packages in R which extend the base functionality. We will utilise another tidyverse package especially designed for data wrangling called dplyr. This all forms a part of the data exploration process.",
    "crumbs": [
      "Worksheets",
      "Week 4: Data cleaning and processing with R/RStudio"
    ]
  },
  {
    "objectID": "intro-to-data-science/autumn-2025/worksheets/week-4.html#data-transformation-with-dplyr-packages",
    "href": "intro-to-data-science/autumn-2025/worksheets/week-4.html#data-transformation-with-dplyr-packages",
    "title": "Week 4: Data cleaning and processing with R/RStudio",
    "section": "2. Data transformation with dplyr packages",
    "text": "2. Data transformation with dplyr packages\nOkay so we know how to load data into R and RStudio, but one of the most important aspects of ‘data wrangling’ is data transformation; that is filtering and selecting data; ordering data etc. We did some of this in Week 2 when we looked at data frames (the main data structure used in R when doing data science). However, if we remember this it was quite hard going and tidyverse provides the dplyr package that is a far easier set of tools for data transformation. RStudio provides ‘cheat sheets’ for commonly used packages and this includes dplyr:\nhttps://www.rstudio.com/wp-content%2Fuploads%2F2015%2F02%2Fdata-wrangling-cheatsheet.pdf\nThese are the main dplyr functions for working on data frames:\n\nPick observations by their values - filter()\nReorder the rows - arrange()\nPick variables by their names - select()\nCreate new variables with functions of existing variables - mutate()\nCollapse many values down to a single summary - summarise()\n\nWe will use the mpg dataset (you might remember it from practicals of INF4000) that comes in-built with tidyverse. The dataset contains information about cars and consists of the following columns:\n\n\n\n\n\n\n\n\nTo read more about this dataset: https://rdrr.io/cran/gamair/man/mpg.html.\nIt is also worth highlighting at this stage a very useful dplyr function which is called ‘piping’ where we can pass the output of a function as the input to a next command using %&gt;%. This saves a lot of time as you don’t need to keep storing results in variables. We’ll see the use of this in a moment.\n\nSelecting rows/observations - filter()\nSuppose we want to select the rows (or observations) from the mpg dataset where the manufacturer is Audi. We can use the filter() function for this:\n\n\n\n\n\n\n\n\nWe could instead filter data where the engine displacement (displ) is greater than 2 (i.e. &gt;2):\n\n\n\n\n\n\n\n\nSimilarly we could select vehicles with engine displacement (displ) is greater than or equal to 2 (&gt;=2):\n\n\n\n\n\n\n\n\nWe can create more complex matching conditions using logical operators (see Week 2). For example, selecting the rows where the engine displacement is greater than 2 and (use &) the number of cylinders is greater than 6:\n\n\n\n\n\n\n\n\nYou could select Audi cars built in 1999 using either of these function calls to filter():\n\n\n\n\n\n\n\n\nNote that in the first command we see the variables separated by ‘,’ and in the second we use ‘&’ - they both produce the same results.\n\n\nExercise\ncan you filter rows where the manufacturer is Audi OR the year of production (year) is 1999? Can you filter rows where the year of production (year) is 1999 and the manufacturer is NOT Audi?\n\n\n\n\n\n\n\n\nSuppose we now want Audi or Chevrolet cars from 1999; we can create this using the following command:\n\n\n\n\n\n\n\n\nIf you look at the RStudio cheatsheet you can see the entire range of logic functions you can use (see “Logic in R” at the bottom of the sheet). One that is useful is the %in% logic comparison for group membership. We could have carried out the above also using %in% and a vector of names:\n\n\n\n\n\n\n\n\nTo show the use of the dplyr pipe command (%&gt;%) we could pass the output of the previous filter() function as the input to the count() function where we want to count the manufacturer, i.e. how many Audi and Chevrolet cars were released in 1999:\n\n\n\n\n\n\n\n\nOn the RStudio cheatsheet you can find some other very helpful subset functions to filter out rows from a data frame (or tibble). This includes the common task of selecting a random sample of observations or rows. For this we can use the sample_frac() function (to sample a proportion of the rows) or sample_n() function (to sample a number of rows):\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nThe replace=TRUE in the functions means that when a row is selected (taken out of the dataset), it is replaced by a copy. What this means, is that it is possible that the same row is chosen more than once. If you don’t want this, don’t write it, the default is not to replace. Notice that every time you run the function, it will provide different results. If you want to make results consistent, you can use the function set.seed(X), where X is a number, before calling the sample function.\n\n\nReordering rows - arrange()\nWe’ll make use of the 2016 Rio Olympic Games medals table to show how we re-order rows using the arrange() dplyr function:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nWe can order by multiple columns simply adding more columns to the arrange() function as parameters. It can be hard to see this in action so we’ll order the data by number of gold, silver and bronze medals, but we will need to inspect the ties (i.e. where the values are the same) to be able to see the ordering by different columns. Let’s arrange the rows by number of gold medals won, followed by silver and then bronze (in descending order):\n\n\n\n\n\n\n\n\nYou can see the ordering with multiple columns where the preference is Gold but when we have the same number of gold medals (e.g. from row 9 and 10) then the data is sorted by number of Silver medals.\n\n\nExercise\nto better view the ordered tibble, pipe the results of the arrange function into the function View. Make sure that ties between countries with the same number of gold and silver medals are sorted based on the number of bronze medals.\n\n\n\n\n\n\n\n\n\n\nSelecting columns - select()\nSelecting columns with dplyr is very simple using the select() function. To select from the mpg dataset the manufacturer and highway fuel efficiency (hwy) columns we use:\n\n\n\n\n\n\n\n\nIt you look at the RStudio cheatsheet you will see (bottom right) a series of ‘helper’ functions. These can be used with the subset() function and used for selecting columns. For example, we could select all the columns that begin with ‘d’:\n\n\n\n\n\n\n\n\nWhat’s useful is that using the pipe %&gt;% command we can then use the commands select() and filter() together to filter out rows and columns\n\n\n\n\n\n\n\n\nNote if we wanted to find all manufacturers other than Chevrolet where hwy &gt;= 20 we could use the logical NOT ! operator:\n\n\n\n\n\n\n\n\nWe could keep combining commands using the pipe %&gt;% command to also arrange the data, e.g. in descending order of manufacturer:\n\n\n\n\n\n\n\n\nFinally, note how each the functions we have seen can work without specifying the data if they are part of a pipe chain. That means you can also start with your data and then chain all the functions. For example, the command below works the same as the previous one:\n\n\n\n\n\n\n\n\n\n\nCreating new variables - mutate()\nThe mutate() function allows making new variables that are typically based on existing variables. For example, in the Rio 2016 medals data we could create a new column/variable for the total of medals won using the mutate() function:\n\n\n\n\n\n\n\n\nNote that the mutate function doesn’t change the original data, which means the new column is only available to functions that are piped after the mutate. If you want to save the new column, you will need to save the result of mutate to a variable. Also note that if you create a column with the same name as an already existing one, it will overwrite the existing one.\n\n\nCollapse many values down to a single summary - summarise()\nThe summarise() function allows us to summarise data into a single row of values. For example, we could compute the average of highway efficiency (hwy) of the mpg dataset using the following summarise() command:\n\n\n\n\n\n\n\n\nNotice that like mutate, summarise creates a new column. Often the summarise() function is paired with the group_by() function. So let’s suppose we want to group the mpg data by manufacturer and year then we can do this with the following group_by() function:\n\n\n\n\n\n\n\n\nWe could use the group_by() and summarise() functions together (with a pipe) to count the number of rows we have for each manufacturer using the n() function (which stands for number):\n\n\n\n\n\n\n\n\n\n\nExercise\nLook at the second page of cheatsheet for useful functions to use with mutate and summarise. How many unique models do each manufacturer produce? Create a new column with a ratio of highway efficiency (hwy) vs city efficiency (cty) called HwyCtyRatio.",
    "crumbs": [
      "Worksheets",
      "Week 4: Data cleaning and processing with R/RStudio"
    ]
  },
  {
    "objectID": "intro-to-data-science/autumn-2025/worksheets/week-4.html#combining-datasets",
    "href": "intro-to-data-science/autumn-2025/worksheets/week-4.html#combining-datasets",
    "title": "Week 4: Data cleaning and processing with R/RStudio",
    "section": "3. Combining datasets",
    "text": "3. Combining datasets\nThere are many ways of combining datasets, which is a common task in data science and you may have to do that in your coursework. Multiple functions are available for this and we will come back to this later in the course but dplyr makes use of the notion of joins from relational databases to combine datasets.\nThere is an excellent overview of this in Chapter 10 of R for Data Science (which is Chapter 13 in the online version: http://r4ds.had.co.nz/relational-data.html). We will come back to joining datasets later in the course because we need to spend more time on this, but for now let’s get a quick flavour of what we can do in R with dplyr.\nNote: don’t worry if you don’t understand all of this yet as you will also learn about relational data next semester in the Database Design module.\nTo demonstrate joining datasets let’s make use of a package called nycflights13 which contains various tables of data which are what we call relational - the tables are related to each other in some way (via keys):\n\n\n\n\n\n\n\n\nNote that the use of :: is the R way of identifying functions (or datasets) within a package. We can also view other datasets:\n\n\n\n\n\n\n\n\nThe airlines data frame is a table of airline numbers and names; the flights data frame contains flight details. To make things easier let’s drop unimportant variables so it’s easier to understand the join results - we can use a select() function for this:\n\n\n\n\n\n\n\n\nSuppose we want to have the full name of the airline in the flights2 table rather than the carrier abbreviation. We have the abbreviation and the full name in the airlines table and therefore we can combine tables using a join command.\n\n\n\n\n\n\n\n\nIn the airlines table you have the full name of the airline carrier listed once - abbreviation and number (e.g. AA is American Airlines Inc.). What we want to do is to go through each of the rows in the flights2 table and match the carrier abbreviation with the carrier in the airlines table replacing the abbreviation with the name as we go.\n\n\n\n\n\n\n\n\nThe left_join() function is an example of a mutating join: “A mutating join allows you to combine variables from two tables. It first matches observations by their keys, then copies across variables from one table to the other” (Wickham & Grolemund, 2017: 181). The idea of a join between tables is that you combine data using a key variable - in this case by the carrier abbreviation. That key variable needs to be present in both tables, ideally using the same column name. There are different types of join including inner and outer joins. We have used an outer join which means that any rows appearing in at least one of the tables being joined is kept. Figure 1 shows three types of outer join: left, right and full with the keys for joining being 1, 2, 3, etc. In outer joins, at least one of the tables (or both in full outer join) keep all of its records. When a row contains a value for the key variable that is not present in the other table, the new column is filled with missing values. Inner joins only match records that are present in both tables and is the most frequent joined you will use in the Database Design module.\n\n\n\nFigure 1: Illustration of outer joins (left, right and full). Source: R for Data Science (Wickham & Grolemund, 2017: 182) and http://r4ds.had.co.nz/relational-data.html\n\n\nIn our case we used a left join which means we keep all the observations in the flights2 table (i.e. we don’t ‘lose’ any of the flights) and where carrier matches in the airlines table the carrier name is copied across as a new variable (or column) in the flights2 table.\nAgain, we will come back to combining datasets in a later session so don’t worry too much about this for now, but do be impressed by what you can do with dplyr because it’s very powerful.",
    "crumbs": [
      "Worksheets",
      "Week 4: Data cleaning and processing with R/RStudio"
    ]
  },
  {
    "objectID": "intro-to-data-science/autumn-2025/worksheets/week-4.html#working-with-real-data",
    "href": "intro-to-data-science/autumn-2025/worksheets/week-4.html#working-with-real-data",
    "title": "Week 4: Data cleaning and processing with R/RStudio",
    "section": "4. Working with real data",
    "text": "4. Working with real data\nFinally, let’s just return to the Free School Meals (FSMs) dataset that we worked on the previous week (you can find the file on the week 3 practical folder). Much of the data we have worked with so far is what we might call clean - it’s fairly complete and in a useable format. But the FSM dataset is more realistic of what we might find in practice. There are at least a couple of ‘features’ to point out with this dataset. Start by viewing the dataset:\n\n\n\n\n\n\n\n\nIf you scroll through the data a couple of things might stand out to you:\n\nThere seems to be a repeated high value (9999) in the FSMTaken column\nThere is a value of NA also in the FSMTaken column\n\nViewing the data.go.uk page about the dataset (https://data.gov.uk/dataset/free-school-meals) we see an explanation for this:\n\nPlease note that, due to data protection requirements, we can’t publish real values\nfor FSMTotal or FSMTaken when those figures are &lt; 5. Thus, those values have been converted to 9999. If a cell has no value it means that data is not collected for that field for that specific school.\n\nIt’s important to know your data and in this case identifying that 9999 is a ‘fake’ value is important, especially if we compute functions (e.g. averages) across the values; if we treat 9999 as an actual value we will get inaccurate results. The other issue is with the NA (Not Available) values - these represent missing data and this is something that comes up a lot in practice. To see the effects of these let’s assume we want to compute the mean number of FSMs taken across all schools in our dataset. Start with getting a summary of the values using the summary() function:\n\n\n\n\n\n\n\n\nWe see that the mean is very different from the median and the maximum value of FSMTaken is 9999. The big difference in the mean and median signals a potential problem and the mean value is being affected by outliers (i.e. the 9999 value). The summary() function also tells us we have 17 missing values (NA).\nWe can also experience problems if we try to use the mean() function on the FSMTaken column:\n\n\n\n\n\n\n\n\nThe problem here is that we have missing values and the mean() function by default doesn’t like this. We can ignore the missing values using the na.rm=TRUE parameter in the mean() function (i.e. this says remove any NA values when computing the mean):\n\n\n\n\n\n\n\n\nBut again the mean seems very high and we know that this is not a true value because of the 9999 value. Therefore we should ignore these rows when computing the mean. You might need to go back to Week 1 where we looked at vectors , but we can filter out values using this command:\n\n\n\n\n\n\n\n\nThe original FSMTaken column contained 250 values; we’ve removed the 9999 values and now we can compute the mean:\n\n\n\n\n\n\n\n\nThis is an accurate mean value and you can confirm this because it is far closer to the median value.\nIn R there is always more than one way to do something. Now you might have said why not use the dplyr function select() to filter out rows where FSMTaken is 9999. We could do this using:\n\n\n\n\n\n\n\n\nIf we then count the number of rows in the filtered dataset we see we have 189 rows:\n\n\n\n\n\n\n\n\nWhy doesn’t this match the 206 value when we counted the number of values in actualFSMTaken? It’s because the filter() command has also removed the data with the NA values (206-17=189). We could keep the NA values using filter() in this way:\n\n\n\n\n\n\n\n\nThe above says filter and return values of FSMTaken that are less than 9999 OR where the value is NA - this is achieved using the is.na() function which returns TRUE if the value is NA.\nThe final question for the moment is what do we do with missing values? One approach is to simply ignore rows (or columns) where we have missing values. But this means we could be throwing away a lot of our data. There are various ways of handling missing data, including replacing NA with a mean value, learning a model/function to estimate a value, insert a random value, etc. For more information see:\n\nhttps://thomasleeper.com/Rcourse/Tutorials/NAhandling.html\nhttp://www.dummies.com/programming/r/how-to-deal-with-missing-data-values-in-r/\n\nOne approach could be to replace the NA value with a mean value. As a simple example suppose we create a vector of 4 elements with the last value being NA:\n\n\n\n\n\n\n\n\nRemember in R that many functions are vectorised - this means that they are executed on each element of a vector. So in the above R will go through each element and test if the value is NA and if it is then replace this element with the mean value of y. So the mean of 4, 5 and 6 if 5 which is used to replace the element with the NA value (element 4). Let’s do this on our actualFSMTaken vector:\n\n\n\n\n\n\n\n\nYou can check this works for yourself (e.g. check the 4th value from the last element in the vector). The floor function is useful to transform the mean value from a double (29.90476) to an integer (29) so there is no mismatch with the over values.\nThis is okay but what if we want to work with the original data frame and keep all the values (rather than extract out a vector of just the FSMTaken column)? We can use the dplyr mutate() function to create a new variable called newFSMTaken in our existing data frame. For now let me show you how to do this as it may appear confusing at first:\n\n\n\n\n\n\n\n\nI have omitted some rows above but if you check row 40 you can see that the NA has now been replaced with the mean value 29.\nYou haven’t seen the ifelse() statement1 before. This is called a condition and is very helpful as it controls when we do things. This basically says if condition==TRUE (the value of FSMTaken is NA) then assign value A (the mean of FSMTaken as an integer); else assign value B (the value that is already present because it is not NA). In our example: if the FSMTaken value is NA then we compute the mean of FSMTaken and use this value; otherwise we use the original FSMTaken value. Using mutate() we assign this to a new variable called newFSMTaken.\n\nExercise\nLets imagine someone asks you to obtain the mean of FSMTaken in the worst case scenario, where all the 9999 values (when the value is less than 5) are considered to be 4. Use the functions you have learned today to change those 9999 values to 4 (probably best to create a new column for this) and calculate the mean. Do the same thing, for the case scenario where FSMTaken for those 9999 values is considered to be 0.",
    "crumbs": [
      "Worksheets",
      "Week 4: Data cleaning and processing with R/RStudio"
    ]
  },
  {
    "objectID": "intro-to-data-science/autumn-2025/worksheets/week-4.html#further-resources",
    "href": "intro-to-data-science/autumn-2025/worksheets/week-4.html#further-resources",
    "title": "Week 4: Data cleaning and processing with R/RStudio",
    "section": "Further resources",
    "text": "Further resources\nSpecifically for this session:\n\nR for Data Science - from the book (Chapters 3, 8 and 10)\nR for Data Science - from the website (Chapters 5, 11 and 13)\nLearning R book (Chapters 12 and 13)\nThe RStudio cheatsheet for data wrangling: https://www.rstudio.com/wp-content/uploads/2015/02/data-wrangling-cheatsheet.pdf\nDatacamp tutorial on importing data: https://www.datacamp.com/community/tutorials/r-data-import-tutorial\nSee the links throughout this handout\n\nFor more information about working with Excel files see: https://www.datacamp.com/community/tutorials/r-tutorial-read-excel-into-r There are packages and functions for reading data into R for most formats, see e.g.: http://www.statmethods.net/input/importingdata.html and https://www.datacamp.com/community/tutorials/r-data-import-tutorial\nMore generally:\n\nSwirl interactive tutorial on R: https://github.com/swirldev/swirl_courses\nR for Data Science: http://r4ds.had.co.nz/",
    "crumbs": [
      "Worksheets",
      "Week 4: Data cleaning and processing with R/RStudio"
    ]
  },
  {
    "objectID": "intro-to-data-science/autumn-2025/worksheets/week-1.html",
    "href": "intro-to-data-science/autumn-2025/worksheets/week-1.html",
    "title": "Week 1: Aesthetic mappings",
    "section": "",
    "text": "In this worksheet, we will discuss a core concept of ggplot, the mapping of data values onto aesthetics.\nFirst we need to load the required R packages. Please wait a moment until the live R session is fully set up and all packages are loaded.\n\n\n\n\n\n\n\n\nNext we set up the data.\n\n\n\n\n\n\n\n\nWe will first work with the dataset temps_houston which contains the average temperature for each day of the year for Houston, TX.",
    "crumbs": [
      "Worksheets",
      "Week 1: Aesthetic mappings"
    ]
  },
  {
    "objectID": "intro-to-data-science/autumn-2025/worksheets/week-1.html#introduction",
    "href": "intro-to-data-science/autumn-2025/worksheets/week-1.html#introduction",
    "title": "Week 1: Aesthetic mappings",
    "section": "",
    "text": "In this worksheet, we will discuss a core concept of ggplot, the mapping of data values onto aesthetics.\nFirst we need to load the required R packages. Please wait a moment until the live R session is fully set up and all packages are loaded.\n\n\n\n\n\n\n\n\nNext we set up the data.\n\n\n\n\n\n\n\n\nWe will first work with the dataset temps_houston which contains the average temperature for each day of the year for Houston, TX.",
    "crumbs": [
      "Worksheets",
      "Week 1: Aesthetic mappings"
    ]
  },
  {
    "objectID": "intro-to-data-science/autumn-2025/worksheets/week-1.html#basic-use-of-ggplot",
    "href": "intro-to-data-science/autumn-2025/worksheets/week-1.html#basic-use-of-ggplot",
    "title": "Week 1: Aesthetic mappings",
    "section": "Basic use of ggplot",
    "text": "Basic use of ggplot\nIn the most basic use of ggplot, we call the ggplot() function with a dataset and an aesthetic mapping (created with aes()), and then we add a geom, such as geom_line() to draw lines or geom_point() to draw points.\nTry this for yourself. Map the column day_of_year onto the x axis and the column temperature onto the y axis, and use geom_line() to display the data.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nTipSolution\n\n\n\n\n\nggplot(temps_houston, aes(x = day_of_year, y = temperature)) +\n  geom_line()\n\n\n\n\nTry again. Now use geom_point() instead of geom_line().\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nTipSolution\n\n\n\n\n\nggplot(temps_houston, aes(x = day_of_year, y = temperature)) +\n  geom_point()\n\n\n\n\nAnd now swap which column you map to x and which to y.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nTipSolution\n\n\n\n\n\nggplot(temps_houston, aes(x = temperature, y = day_of_year)) +\n  geom_point()",
    "crumbs": [
      "Worksheets",
      "Week 1: Aesthetic mappings"
    ]
  },
  {
    "objectID": "intro-to-data-science/autumn-2025/worksheets/week-1.html#more-complex-geoms",
    "href": "intro-to-data-science/autumn-2025/worksheets/week-1.html#more-complex-geoms",
    "title": "Week 1: Aesthetic mappings",
    "section": "More complex geoms",
    "text": "More complex geoms\nYou can use other geoms to make different types of plots. For example, geom_boxplot() will make boxplots. For boxplots, we frequently want categorical data on the x or y axis. For example, we might want a separate boxplot for each month. Try this out. Puth month on the x axis, temperature on the y axis, and use geom_boxplot().\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nTipHint\n\n\n\n\n\nggplot(temps_houston, aes(x = month, y = temperature)) +\n  ___()\n\n\n\n\n\n\n\n\n\n\n\nTipSolution\n\n\n\n\n\nggplot(temps_houston, aes(x = month, y = temperature)) +\n  geom_boxplot()\n\n\n\n\nNow put the month on the y axis and the temperature on the x axis.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nTipHint\n\n\n\n\n\nggplot(temps_houston, aes(x = ___, y = ___)) +\n  geom_boxplot()\n\n\n\n\n\n\n\n\n\n\n\nTipSolution\n\n\n\n\n\nggplot(temps_houston, aes(x = temperature, y = month)) +\n  geom_boxplot()",
    "crumbs": [
      "Worksheets",
      "Week 1: Aesthetic mappings"
    ]
  },
  {
    "objectID": "intro-to-data-science/autumn-2025/worksheets/week-1.html#adding-color",
    "href": "intro-to-data-science/autumn-2025/worksheets/week-1.html#adding-color",
    "title": "Week 1: Aesthetic mappings",
    "section": "Adding color",
    "text": "Adding color\nNext we will be working with the dataset temperatures, which is similar to temps_houston but contains data for three more locations.\n\n\n\n\n\n\n\n\nMake a line plot of temperature against day_of_year, using the color aesthetic to color the lines by location.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nTipHint\n\n\n\n\n\nggplot(temperatures, aes(x = day_of_year, y = temperature, color = ___)) +\n  geom_line()\n\n\n\n\n\n\n\n\n\n\n\nTipSolution\n\n\n\n\n\nggplot(temperatures, aes(x = day_of_year, y = temperature, color = location)) +\n  geom_line()\n\n\n\n\nTry again, this time using location as the location along the y axis and temperature for the color. This plot looks better with geom_point() than geom_line(). (Try it out to see why. Also, try geom_point(size = 5) to create larger points.)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nTipHint\n\n\n\n\n\nggplot(temperatures, aes(x = ___, y = ___, color = ___)) +\n  geom_point()\n\n\n\n\n\n\n\n\n\n\n\nTipSolution\n\n\n\n\n\nggplot(temperatures, aes(x = day_of_year, y = location, color = temperature)) +\n  geom_point()",
    "crumbs": [
      "Worksheets",
      "Week 1: Aesthetic mappings"
    ]
  },
  {
    "objectID": "intro-to-data-science/autumn-2025/worksheets/week-1.html#using-the-fill-aesthetic",
    "href": "intro-to-data-science/autumn-2025/worksheets/week-1.html#using-the-fill-aesthetic",
    "title": "Week 1: Aesthetic mappings",
    "section": "Using the fill aesthetic",
    "text": "Using the fill aesthetic\nSome geoms use a fill aesthetic, which is similar to color but applies to shaded areas. (color applies to lines and points.) For example, we can use the fill aesthetic with geom_boxplot() to color the interior of the box. Try this yourself. Plot month on x, temperature on y, and color the interior of the box by location.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nTipHint\n\n\n\n\n\nggplot(temperatures, aes(x = month, y = ___, fill = ___)) +\n  geom_boxplot()\n\n\n\n\n\n\n\n\n\n\n\nTipSolution\n\n\n\n\n\nggplot(temperatures, aes(x = month, y = temperature, fill = location)) +\n  geom_boxplot()\n\n\n\n\nCan you color the lines of the boxplot by location and the interior by month? Try it.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nTipHint\n\n\n\n\n\nggplot(temperatures, aes(x = month, y = temperature, color = ___, fill = ___)) +\n  geom_boxplot()\n\n\n\n\n\n\n\n\n\n\n\nTipSolution\n\n\n\n\n\nggplot(temperatures, aes(x = month, y = temperature, color = location, fill = month)) +\n  geom_boxplot()",
    "crumbs": [
      "Worksheets",
      "Week 1: Aesthetic mappings"
    ]
  },
  {
    "objectID": "intro-to-data-science/autumn-2025/worksheets/week-1.html#using-aesthetics-as-parameters",
    "href": "intro-to-data-science/autumn-2025/worksheets/week-1.html#using-aesthetics-as-parameters",
    "title": "Week 1: Aesthetic mappings",
    "section": "Using aesthetics as parameters",
    "text": "Using aesthetics as parameters\nMany of the aesthetics (such as color, fill, and also size to change line size or point thickness) can be used as parameters inside a geom rather than inside an aes() statement. The difference is that when you use an aesthetic as a parameter, you specify a specific value, such as color = \"blue\", rather than a mapping, such as aes(color = location). Notice the difference: Inside the aes() function, we don’t actually specify the specific color values, ggplot does that for us. We only say that we want the data values of the location column to correspond to different colors. (We will learn later how to tell ggplot to use specific colors in this mapping.)\nTry this with the boxplot example from the previous section. Map location onto the fill aesthetic but set the color of the lines to \"navyblue\".\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nTipHint\n\n\n\n\n\nggplot(temperatures, aes(x = month, y = temperature, fill = ___)) +\n  geom_boxplot(color = ___)\n\n\n\n\n\n\n\n\n\n\n\nTipSolution\n\n\n\n\n\nggplot(temperatures, aes(x = month, y = temperature, fill = location)) +\n  geom_boxplot(color = \"navyblue\")\n\n\n\n\nNow do the reverse. Map location onto the line colors but fill the box with the color \"navyblue\".\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nTipHint\n\n\n\n\n\nggplot(temperatures, aes(x = month, y = temperature, color = ___)) +\n  geom_boxplot(fill = ___)\n\n\n\n\n\n\n\n\n\n\n\nTipSolution\n\n\n\n\n\nggplot(temperatures, aes(x = month, y = temperature, color = location)) +\n  geom_boxplot(fill = \"navyblue\")",
    "crumbs": [
      "Worksheets",
      "Week 1: Aesthetic mappings"
    ]
  },
  {
    "objectID": "intro-to-data-science/autumn-2025/slides/week-1.html#why-data-visualization",
    "href": "intro-to-data-science/autumn-2025/slides/week-1.html#why-data-visualization",
    "title": "Introduction",
    "section": "Why Data Visualization?",
    "text": "Why Data Visualization?",
    "crumbs": [
      "Slides",
      "Introduction"
    ]
  },
  {
    "objectID": "intro-to-data-science/autumn-2025/slides/week-1.html#why-data-visualization-1",
    "href": "intro-to-data-science/autumn-2025/slides/week-1.html#why-data-visualization-1",
    "title": "Introduction",
    "section": "Why Data Visualization?",
    "text": "Why Data Visualization?",
    "crumbs": [
      "Slides",
      "Introduction"
    ]
  },
  {
    "objectID": "intro-to-data-science/autumn-2025/slides/week-1.html#why-r",
    "href": "intro-to-data-science/autumn-2025/slides/week-1.html#why-r",
    "title": "Introduction",
    "section": "Why R?",
    "text": "Why R?",
    "crumbs": [
      "Slides",
      "Introduction"
    ]
  },
  {
    "objectID": "intro-to-data-science/autumn-2025/slides/week-1.html#why-me",
    "href": "intro-to-data-science/autumn-2025/slides/week-1.html#why-me",
    "title": "Introduction",
    "section": "Why me?",
    "text": "Why me?\n\n\n\nhttps://clauswilke.com/dataviz",
    "crumbs": [
      "Slides",
      "Introduction"
    ]
  },
  {
    "objectID": "intro-to-data-science/autumn-2025/slides/week-1.html#why-me-1",
    "href": "intro-to-data-science/autumn-2025/slides/week-1.html#why-me-1",
    "title": "Introduction",
    "section": "Why me?",
    "text": "Why me?",
    "crumbs": [
      "Slides",
      "Introduction"
    ]
  },
  {
    "objectID": "intro-to-data-science/autumn-2025/slides/week-1.html#we-will-use-quarto-for-all-assignments",
    "href": "intro-to-data-science/autumn-2025/slides/week-1.html#we-will-use-quarto-for-all-assignments",
    "title": "Introduction",
    "section": "We will use Quarto for all assignments",
    "text": "We will use Quarto for all assignments\n\n\n\n\nhttps://quarto.org/",
    "crumbs": [
      "Slides",
      "Introduction"
    ]
  },
  {
    "objectID": "intro-to-data-science/autumn-2025/slides/week-1.html#edupod-login-httpsedupod.cns.utexas.edu",
    "href": "intro-to-data-science/autumn-2025/slides/week-1.html#edupod-login-httpsedupod.cns.utexas.edu",
    "title": "Introduction",
    "section": "Edupod login: https://edupod.cns.utexas.edu",
    "text": "Edupod login: https://edupod.cns.utexas.edu",
    "crumbs": [
      "Slides",
      "Introduction"
    ]
  },
  {
    "objectID": "intro-to-data-science/autumn-2025/slides/week-1.html#edupod-login-httpsedupod.cns.utexas.edu-1",
    "href": "intro-to-data-science/autumn-2025/slides/week-1.html#edupod-login-httpsedupod.cns.utexas.edu-1",
    "title": "Introduction",
    "section": "Edupod login: https://edupod.cns.utexas.edu",
    "text": "Edupod login: https://edupod.cns.utexas.edu",
    "crumbs": [
      "Slides",
      "Introduction"
    ]
  },
  {
    "objectID": "intro-to-data-science/autumn-2025/slides/week-1.html#edupod-login-httpsedupod.cns.utexas.edu-2",
    "href": "intro-to-data-science/autumn-2025/slides/week-1.html#edupod-login-httpsedupod.cns.utexas.edu-2",
    "title": "Introduction",
    "section": "Edupod login: https://edupod.cns.utexas.edu",
    "text": "Edupod login: https://edupod.cns.utexas.edu",
    "crumbs": [
      "Slides",
      "Introduction"
    ]
  },
  {
    "objectID": "intro-to-data-science/autumn-2025/slides/week-1.html#working-with-quarto-documents",
    "href": "intro-to-data-science/autumn-2025/slides/week-1.html#working-with-quarto-documents",
    "title": "Introduction",
    "section": "Working with Quarto documents",
    "text": "Working with Quarto documents",
    "crumbs": [
      "Slides",
      "Introduction"
    ]
  },
  {
    "objectID": "intro-to-data-science/autumn-2025/slides/week-1.html#working-with-quarto-documents-1",
    "href": "intro-to-data-science/autumn-2025/slides/week-1.html#working-with-quarto-documents-1",
    "title": "Introduction",
    "section": "Working with Quarto documents",
    "text": "Working with Quarto documents",
    "crumbs": [
      "Slides",
      "Introduction"
    ]
  },
  {
    "objectID": "intro-to-data-science/autumn-2025/slides/week-1.html#working-with-quarto-documents-2",
    "href": "intro-to-data-science/autumn-2025/slides/week-1.html#working-with-quarto-documents-2",
    "title": "Introduction",
    "section": "Working with Quarto documents",
    "text": "Working with Quarto documents",
    "crumbs": [
      "Slides",
      "Introduction"
    ]
  },
  {
    "objectID": "intro-to-data-science/autumn-2025/slides/week-1.html#working-with-quarto-documents-3",
    "href": "intro-to-data-science/autumn-2025/slides/week-1.html#working-with-quarto-documents-3",
    "title": "Introduction",
    "section": "Working with Quarto documents",
    "text": "Working with Quarto documents",
    "crumbs": [
      "Slides",
      "Introduction"
    ]
  },
  {
    "objectID": "intro-to-data-science/autumn-2025/slides/week-1.html#working-with-quarto-documents-4",
    "href": "intro-to-data-science/autumn-2025/slides/week-1.html#working-with-quarto-documents-4",
    "title": "Introduction",
    "section": "Working with Quarto documents",
    "text": "Working with Quarto documents",
    "crumbs": [
      "Slides",
      "Introduction"
    ]
  },
  {
    "objectID": "intro-to-data-science/autumn-2025/slides/week-1.html#use-export-to-download-pdfs",
    "href": "intro-to-data-science/autumn-2025/slides/week-1.html#use-export-to-download-pdfs",
    "title": "Introduction",
    "section": "Use “Export” to download PDFs",
    "text": "Use “Export” to download PDFs",
    "crumbs": [
      "Slides",
      "Introduction"
    ]
  },
  {
    "objectID": "intro-to-data-science/autumn-2025/slides/week-1.html#the-source-for-the-class-website-is-on-github",
    "href": "intro-to-data-science/autumn-2025/slides/week-1.html#the-source-for-the-class-website-is-on-github",
    "title": "Introduction",
    "section": "The source for the class website is on GitHub",
    "text": "The source for the class website is on GitHub",
    "crumbs": [
      "Slides",
      "Introduction"
    ]
  },
  {
    "objectID": "intro-to-data-science/autumn-2025/slides/week-1.html#the-source-for-the-class-website-is-on-github-1",
    "href": "intro-to-data-science/autumn-2025/slides/week-1.html#the-source-for-the-class-website-is-on-github-1",
    "title": "Introduction",
    "section": "The source for the class website is on GitHub",
    "text": "The source for the class website is on GitHub",
    "crumbs": [
      "Slides",
      "Introduction"
    ]
  },
  {
    "objectID": "intro-to-data-science/autumn-2025/slides/week-1.html#the-source-for-the-class-website-is-on-github-2",
    "href": "intro-to-data-science/autumn-2025/slides/week-1.html#the-source-for-the-class-website-is-on-github-2",
    "title": "Introduction",
    "section": "The source for the class website is on GitHub",
    "text": "The source for the class website is on GitHub\n\n\n\n\nhttps://github.com/wilkelab/SDS366",
    "crumbs": [
      "Slides",
      "Introduction"
    ]
  },
  {
    "objectID": "intro-to-data-science/autumn-2025/slides/week-1.html#press-e-to-save-slides-as-pdf",
    "href": "intro-to-data-science/autumn-2025/slides/week-1.html#press-e-to-save-slides-as-pdf",
    "title": "Introduction",
    "section": "Press ‘e’ to save slides as PDF",
    "text": "Press ‘e’ to save slides as PDF\n\n\n\n(Works best on Chrome)",
    "crumbs": [
      "Slides",
      "Introduction"
    ]
  },
  {
    "objectID": "intro-to-data-science/autumn-2025/slides/week-1.html#further-reading",
    "href": "intro-to-data-science/autumn-2025/slides/week-1.html#further-reading",
    "title": "Introduction",
    "section": "Further reading",
    "text": "Further reading\n\nFundamentals of Data Visualization: Read the book online\nQuarto docs: Comprehensive guide",
    "crumbs": [
      "Slides",
      "Introduction"
    ]
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "About this site"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "UoS GTA Semester I",
    "section": "",
    "text": "This is a Quarto website.\nTo learn more about Quarto websites visit https://quarto.org/docs/websites."
  },
  {
    "objectID": "intro-to-data-science/autumn-2025/syllabus.html",
    "href": "intro-to-data-science/autumn-2025/syllabus.html",
    "title": "SDS 366 Schedule Spring 2025",
    "section": "",
    "text": "Materials:\n\n\nSlides\n\nWorksheet 1: Introduction to Quarto\nWorksheet 2: Introduction to R\n\n\n\n\n\nMaterials:\n\n\nSlides\n\nWorksheet\n\n\n\n\n\nMaterials:\n\n\nSlides Part I (visualizing amounts)\nWorksheet Part I\nSlides Part II (telling a story)\n\n\n\n\n\nMaterials:\n\n\nSlides\n\nWorksheet\n\n\n\n\n\nMaterials:\n\n\nSlides\n\nWorksheet\n\n\n\n\n\nMaterials:\n\n\nSlides\n\nWorksheet\n\n\n\n\n\nMaterials:\n\n\nSlides\n\nWorksheet\n\n\n\n\n\nMaterials:\n\n\nSlides\n\nWorksheet\n\n\n\n\n\nMaterials:\n\n\nSlides Part I (pipe, sorting, filtering, mutating)\nWorksheet Part I\nSlides Part II (summarizing, pivoting, joining)\nWorksheet Part II\n\n\n\n\n\nMaterials:\n\n\nSlides\n\nWorksheet\n\n\n\n\n\nMaterials:\n\n\nSlides\nWorksheet Part I (data cleaning)\nWorksheet Part II (missing data)\n\n\n\n\n\nMaterials:\n\n\nSlides\nWorksheet\n\n\n\n\n\nMaterials:\n\n\nSlides\nWorksheet\n\n\n\n\n\nMaterials:\n\n\nSlides\n\nWorksheet\n\n\n\n\n\nMaterials:\n\n\nSlides\n\nWorksheet\n\n\n\n\n\nMaterials:\n\n\nSlides\n\nWorksheet\n\n\n\n\n\nMaterials:\n\n\nSlides\n\nWorksheet\n\n\n\n\n\nMaterials:\n\n\nSlides\n\nWorksheet\n\n\n\n\n\nMaterials:\n\n\nSlides\n\nWorksheet\n\n\n\n\n\nMaterials:\n\n\nSlides\n\nWorksheet\n\n\n\n\n\nMaterials:\n\n\nSlides\n\nWorksheet\n\n\n\n\n\nMaterials:\n\n\nSlides\n\nWorksheet\n\n\n\n\n\nMaterials:\n\n\nSlides\n\nWorksheet\n\n\n\n\n\nMaterials:\n\n\nSlides\n\nWorksheet\n\n\n\n\n\nMaterials:\n\n\nSlides\n\nWorksheet\n\n\n\n\n\nMaterials:\n\n\nSlides: Interactive plots\n\nWorksheet: Interactive plots\nSlides: Animations\n\n\n\n\n\nMaterials:\n\n\nSlides\n\nWorksheet",
    "crumbs": [
      "Syllabus"
    ]
  },
  {
    "objectID": "intro-to-data-science/autumn-2025/syllabus.html#lectures",
    "href": "intro-to-data-science/autumn-2025/syllabus.html#lectures",
    "title": "SDS 366 Schedule Spring 2025",
    "section": "",
    "text": "Materials:\n\n\nSlides\n\nWorksheet 1: Introduction to Quarto\nWorksheet 2: Introduction to R\n\n\n\n\n\nMaterials:\n\n\nSlides\n\nWorksheet\n\n\n\n\n\nMaterials:\n\n\nSlides Part I (visualizing amounts)\nWorksheet Part I\nSlides Part II (telling a story)\n\n\n\n\n\nMaterials:\n\n\nSlides\n\nWorksheet\n\n\n\n\n\nMaterials:\n\n\nSlides\n\nWorksheet\n\n\n\n\n\nMaterials:\n\n\nSlides\n\nWorksheet\n\n\n\n\n\nMaterials:\n\n\nSlides\n\nWorksheet\n\n\n\n\n\nMaterials:\n\n\nSlides\n\nWorksheet\n\n\n\n\n\nMaterials:\n\n\nSlides Part I (pipe, sorting, filtering, mutating)\nWorksheet Part I\nSlides Part II (summarizing, pivoting, joining)\nWorksheet Part II\n\n\n\n\n\nMaterials:\n\n\nSlides\n\nWorksheet\n\n\n\n\n\nMaterials:\n\n\nSlides\nWorksheet Part I (data cleaning)\nWorksheet Part II (missing data)\n\n\n\n\n\nMaterials:\n\n\nSlides\nWorksheet\n\n\n\n\n\nMaterials:\n\n\nSlides\nWorksheet\n\n\n\n\n\nMaterials:\n\n\nSlides\n\nWorksheet\n\n\n\n\n\nMaterials:\n\n\nSlides\n\nWorksheet\n\n\n\n\n\nMaterials:\n\n\nSlides\n\nWorksheet\n\n\n\n\n\nMaterials:\n\n\nSlides\n\nWorksheet\n\n\n\n\n\nMaterials:\n\n\nSlides\n\nWorksheet\n\n\n\n\n\nMaterials:\n\n\nSlides\n\nWorksheet\n\n\n\n\n\nMaterials:\n\n\nSlides\n\nWorksheet\n\n\n\n\n\nMaterials:\n\n\nSlides\n\nWorksheet\n\n\n\n\n\nMaterials:\n\n\nSlides\n\nWorksheet\n\n\n\n\n\nMaterials:\n\n\nSlides\n\nWorksheet\n\n\n\n\n\nMaterials:\n\n\nSlides\n\nWorksheet\n\n\n\n\n\nMaterials:\n\n\nSlides\n\nWorksheet\n\n\n\n\n\nMaterials:\n\n\nSlides: Interactive plots\n\nWorksheet: Interactive plots\nSlides: Animations\n\n\n\n\n\nMaterials:\n\n\nSlides\n\nWorksheet",
    "crumbs": [
      "Syllabus"
    ]
  },
  {
    "objectID": "intro-to-data-science/autumn-2025/syllabus.html#homeworks",
    "href": "intro-to-data-science/autumn-2025/syllabus.html#homeworks",
    "title": "SDS 366 Schedule Spring 2025",
    "section": "Homeworks",
    "text": "Homeworks\nAll homeworks are due by 11:00pm on the day they are due. Homeworks need to be submitted as pdf files on Canvas.\n\nHomework 1 (due Jan 23, 2025)\n\nMaterials:\n\n\nQuarto template\nPDF\n\n\n\nHomework 2 (due Jan 30, 2025)\n\nMaterials:\n\n\nQuarto template\nPDF\n\n\n\nHomework 3 (due Feb 6, 2025)\n\nMaterials:\n\n\nQuarto template\nPDF\n\n\n\nHomework 4 (due Feb 27, 2025)\n\nMaterials:\n\n\nQuarto template\nPDF\n\n\n\nHomework 5 (due Mar 6, 2025)\n\nMaterials:\n\n\nQuarto template\nPDF\n\n\n\nHomework 6 (due Apr 3, 2025)\n\nMaterials:\n\n\nQuarto template\nPDF\n\n\n\nHomework 7 (due Apr 10, 2025)\n\nMaterials:\n\n\nQuarto template\nPDF",
    "crumbs": [
      "Syllabus"
    ]
  },
  {
    "objectID": "intro-to-data-science/autumn-2025/syllabus.html#projects",
    "href": "intro-to-data-science/autumn-2025/syllabus.html#projects",
    "title": "SDS 366 Schedule Spring 2025",
    "section": "Projects",
    "text": "Projects\nAll projects are due by 11:00pm on the day they are due. Projects need to be submitted on Canvas. Please carefully read the submission instructions for each project.\n\nProject 1 (due Feb 13, 2025)\n\nMaterials:\n\n\nInstructions (pdf)\nProject Template (qmd)\nProject Template (pdf)\nGrading rubric (pdf)\nExample project (pdf)\n\n\n\nProject 2 (due Mar 13, 2025)\n\nMaterials:\n\n\nInstructions (pdf)\nProject Template (qmd)\nProject Template (pdf)\nGrading rubric (pdf)\nGrading instructions (pdf)\n\n\n\nProject 3 (due Apr 17, 2025)\n\nMaterials:\n\n\nInstructions (pdf)\nProject Template (qmd)\nProject Template (pdf)\nGrading rubric (pdf)",
    "crumbs": [
      "Syllabus"
    ]
  },
  {
    "objectID": "intro-to-data-science/autumn-2025/worksheets/week-3.html",
    "href": "intro-to-data-science/autumn-2025/worksheets/week-3.html",
    "title": "Week 3: R / RStudio practicals",
    "section": "",
    "text": "This worksheet contains a sequence of short examples and exercises that demonstrate basic R workflows: loading datasets, exploring data, making simple visualisations, importing data from files and the web, and working with JSON.\n\n\n\n\n\n\n\n\nLoad the built-in “women” dataset that contains the height and weight of a sample of women and inspect it.\n\n\n\n\n\n\n\n\nExplore the distribution of a continuous variable using a histogram.\n\n\n\n\n\n\n\n\nView the help page for hist to see what arguments you can modify.\n\n\n\n\n\n\n\n\nModify the histogram (example with custom breaks, title and x label).\n\n\n\n\n\n\n\n\nDisplay graphs side-by-side (set plotting area to 1 row and 2 columns), then show two histograms.\n\n\n\n\n\n\n\n\nTo display one graph at a time you can reset the plotting area (example command shown) and then plot the dataset.",
    "crumbs": [
      "Worksheets",
      "Week 3: R / RStudio practicals"
    ]
  },
  {
    "objectID": "intro-to-data-science/autumn-2025/worksheets/week-3.html#rrstudio-practical-part-1",
    "href": "intro-to-data-science/autumn-2025/worksheets/week-3.html#rrstudio-practical-part-1",
    "title": "Week 3: R / RStudio practicals",
    "section": "",
    "text": "This worksheet contains a sequence of short examples and exercises that demonstrate basic R workflows: loading datasets, exploring data, making simple visualisations, importing data from files and the web, and working with JSON.\n\n\n\n\n\n\n\n\nLoad the built-in “women” dataset that contains the height and weight of a sample of women and inspect it.\n\n\n\n\n\n\n\n\nExplore the distribution of a continuous variable using a histogram.\n\n\n\n\n\n\n\n\nView the help page for hist to see what arguments you can modify.\n\n\n\n\n\n\n\n\nModify the histogram (example with custom breaks, title and x label).\n\n\n\n\n\n\n\n\nDisplay graphs side-by-side (set plotting area to 1 row and 2 columns), then show two histograms.\n\n\n\n\n\n\n\n\nTo display one graph at a time you can reset the plotting area (example command shown) and then plot the dataset.",
    "crumbs": [
      "Worksheets",
      "Week 3: R / RStudio practicals"
    ]
  },
  {
    "objectID": "intro-to-data-science/autumn-2025/worksheets/week-3.html#importing-data-into-r-rstudio",
    "href": "intro-to-data-science/autumn-2025/worksheets/week-3.html#importing-data-into-r-rstudio",
    "title": "Week 3: R / RStudio practicals",
    "section": "Importing data into R / RStudio",
    "text": "Importing data into R / RStudio\nView available datasets and load the tidyverse. Then read example TSV/CSV files. The examples below show different read_* options, including forcing no header and specifying column types.\n\n\n\n\n\n\n\n\n\nExercise\nUsing the visualisations you saw previously, explore the two datasets you have loaded (the free school meals and the HIV prevalence). For example, compare the distribution of HIV prevalence across different years using side-by-side histograms.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nTipSolution",
    "crumbs": [
      "Worksheets",
      "Week 3: R / RStudio practicals"
    ]
  },
  {
    "objectID": "intro-to-data-science/autumn-2025/worksheets/week-3.html#read-html-and-xml-data",
    "href": "intro-to-data-science/autumn-2025/worksheets/week-3.html#read-html-and-xml-data",
    "title": "Week 3: R / RStudio practicals",
    "section": "Read HTML and XML data",
    "text": "Read HTML and XML data\nInstall and load the rvest package, then read a Wikipedia page and extract headings, paragraphs, links, tables and images as examples of web scraping.",
    "crumbs": [
      "Worksheets",
      "Week 3: R / RStudio practicals"
    ]
  },
  {
    "objectID": "intro-to-data-science/autumn-2025/worksheets/week-3.html#read-json-data",
    "href": "intro-to-data-science/autumn-2025/worksheets/week-3.html#read-json-data",
    "title": "Week 3: R / RStudio practicals",
    "section": "Read JSON data",
    "text": "Read JSON data\nInstall and load jsonlite, parse a small JSON string, roundtrip to JSON, and demonstrate reading a remote JSON resource (Citibike station information). Then explore the list/dataframe structure and make plots from flattened data.\n\n\n\n\n\n\n\n\n\nExercise\nUsing the visualisations you have learned, show the distribution of available bikes and compare the number of available docks to the number of total docks (notice these are columns inside a dataframe that is inside a list).\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nTipSolution",
    "crumbs": [
      "Worksheets",
      "Week 3: R / RStudio practicals"
    ]
  },
  {
    "objectID": "intro-to-data-science/autumn-2025/worksheets/week-3.html#additional-info",
    "href": "intro-to-data-science/autumn-2025/worksheets/week-3.html#additional-info",
    "title": "Week 3: R / RStudio practicals",
    "section": "Additional info",
    "text": "Additional info\nCheck and increase how many elements R will print to the console.",
    "crumbs": [
      "Worksheets",
      "Week 3: R / RStudio practicals"
    ]
  }
]